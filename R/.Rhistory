#
# epi2 <- impute_gsem(epi, 1/2)
# pbla_incomplete_gsem(rates, epi2[,2], epi2[,1], N)
#
#
# nlm(pbla_incomplete_gsem, c(1,1), r=epi2[,2], i=epi2[,1], N=N)$estimate
# nlm(pbla_partial_gsem, c(1,1), r=epi2[,2], N=N)$estimate
# mle_complete_gsem(epi[,2], epi[,1], N)
# Simulation Study --------------------------------------------------------
while(simCt < simSize){
epi <- rgsem(rates, N)
epi <- filter_gsem(epi)
while(dim(epi)[1] < simMin){
epi <- rgsem(rates, N)
epi <- filter_gsem(epi)
}
simCt <- simCt + 1
simI[simCt] <- dim(epi)[1]
r <- epi[,2]
i <- epi[,1]
simStore[simCt,1:2,1] <- mle_complete_gsem(r, i, N)
simStore[simCt,3,1] <- simStore[simCt,1,1] / simStore[simCt,2,1]
epi <- sort_gsem(epi)
r <- epi[,2]
simStore[simCt,1:2,2] <- nlm(pbla_partial_gsem, rates, r, N)$estimate
simStore[simCt,3,2] <- simStore[simCt,1,2] / simStore[simCt,2,2]
iepi <- decomplete_gsem(epi, simP, simQ)
iepi <- sort_gsem(iepi)
r <- iepi[,2]
i <- iepi[,1]
simStore[simCt,1:2,3] <- nlm(pbla_incomplete_gsem, rates, r, i, N)$estimate
simStore[simCt,3,3] <- simStore[simCt,1,3] / simStore[simCt,2,3]
if(!(simCt %% simPrint)){print(simCt)}
}
simI
simStore
# incompleteSEM Simulation Study
# Seth Temple, sdtemple@uw.edu
# Setup -------------------------------------------------------------------
library(incompleteSEM)
# epidemic model parameters
N <- 500
beta <- 1.2
gamma <- 1
rates <- c(beta, gamma)
# simulation parameters
simCt <- 0
simSize <- 5
simMin <- 10
simP <- 3/4
simQ <- 1
simPrint <- 10
# storage parameters
simStore <- array(NA, dim = c(simSize,3,3))
simI <- rep(NA, simSize)
# testing -----------------------------------------------------------------
# epi <- rgsem(c(beta, gamma), N)
# epi <- filter_gsem(epi)
#
# likelihood_complete_gsem(rates, epi[,2], epi[,1], N)
# mle_complete_gsem(epi[,2], epi[,1], N)
# pbla_incomplete_gsem(rates, epi[,2], epi[,1], N)
#
# pbla_partial_gsem(rates, epi[,2], N)
#
# epi <- sort_gsem(epi)
#
# epi2 <- impute_gsem(epi, 1/2)
# pbla_incomplete_gsem(rates, epi2[,2], epi2[,1], N)
#
#
# nlm(pbla_incomplete_gsem, c(1,1), r=epi2[,2], i=epi2[,1], N=N)$estimate
# nlm(pbla_partial_gsem, c(1,1), r=epi2[,2], N=N)$estimate
# mle_complete_gsem(epi[,2], epi[,1], N)
# Simulation Study --------------------------------------------------------
while(simCt < simSize){
epi <- rgsem(rates, N)
epi <- filter_gsem(epi)
while(dim(epi)[1] < simMin){
epi <- rgsem(rates, N)
epi <- filter_gsem(epi)
}
simCt <- simCt + 1
simI[simCt] <- dim(epi)[1]
r <- epi[,2]
i <- epi[,1]
simStore[simCt,1:2,1] <- mle_complete_gsem(r, i, N)
simStore[simCt,3,1] <- simStore[simCt,1,1] / simStore[simCt,2,1]
epi <- sort_gsem(epi)
r <- epi[,2]
simStore[simCt,1:2,2] <- nlm(pbla_partial_gsem, rates, r, N)$estimate
simStore[simCt,3,2] <- simStore[simCt,1,2] / simStore[simCt,2,2]
iepi <- decomplete_gsem(epi, simP, simQ)
iepi <- sort_gsem(iepi)
r <- iepi[,2]
i <- iepi[,1]
simStore[simCt,1:2,3] <- nlm(pbla_incomplete_gsem, rates, r, i, N)$estimate
simStore[simCt,3,3] <- simStore[simCt,1,3] / simStore[simCt,2,3]
if(!(simCt %% simPrint)){print(simCt)}
}
simStore
simI
# incompleteSEM Simulation Study
# Seth Temple, sdtemple@uw.edu
# Setup -------------------------------------------------------------------
library(incompleteSEM)
# epidemic model parameters
N <- 200
beta <- 4
gamma <- 1
rates <- c(beta, gamma)
# simulation parameters
simCt <- 0
simSize <- 5
simMin <- 10
simP <- 3/4
simQ <- 1
simPrint <- 10
# storage parameters
simStore <- array(NA, dim = c(simSize,3,3))
simI <- rep(NA, simSize)
# testing -----------------------------------------------------------------
# epi <- rgsem(c(beta, gamma), N)
# epi <- filter_gsem(epi)
#
# likelihood_complete_gsem(rates, epi[,2], epi[,1], N)
# mle_complete_gsem(epi[,2], epi[,1], N)
# pbla_incomplete_gsem(rates, epi[,2], epi[,1], N)
#
# pbla_partial_gsem(rates, epi[,2], N)
#
# epi <- sort_gsem(epi)
#
# epi2 <- impute_gsem(epi, 1/2)
# pbla_incomplete_gsem(rates, epi2[,2], epi2[,1], N)
#
#
# nlm(pbla_incomplete_gsem, c(1,1), r=epi2[,2], i=epi2[,1], N=N)$estimate
# nlm(pbla_partial_gsem, c(1,1), r=epi2[,2], N=N)$estimate
# mle_complete_gsem(epi[,2], epi[,1], N)
# Simulation Study --------------------------------------------------------
while(simCt < simSize){
epi <- rgsem(rates, N)
epi <- filter_gsem(epi)
while(dim(epi)[1] < simMin){
epi <- rgsem(rates, N)
epi <- filter_gsem(epi)
}
simCt <- simCt + 1
simI[simCt] <- dim(epi)[1]
r <- epi[,2]
i <- epi[,1]
simStore[simCt,1:2,1] <- mle_complete_gsem(r, i, N)
simStore[simCt,3,1] <- simStore[simCt,1,1] / simStore[simCt,2,1]
epi <- sort_gsem(epi)
r <- epi[,2]
simStore[simCt,1:2,2] <- nlm(pbla_partial_gsem, rates, r, N)$estimate
simStore[simCt,3,2] <- simStore[simCt,1,2] / simStore[simCt,2,2]
iepi <- decomplete_gsem(epi, simP, simQ)
iepi <- sort_gsem(iepi)
r <- iepi[,2]
i <- iepi[,1]
simStore[simCt,1:2,3] <- nlm(pbla_incomplete_gsem, rates, r, i, N)$estimate
simStore[simCt,3,3] <- simStore[simCt,1,3] / simStore[simCt,2,3]
if(!(simCt %% simPrint)){print(simCt)}
}
simStore
# incompleteSEM Simulation Study
# Seth Temple, sdtemple@uw.edu
# Setup -------------------------------------------------------------------
library(incompleteSEM)
# epidemic model parameters
N <- 200
beta <- 4
gamma <- 1
rates <- c(beta, gamma)
# simulation parameters
simCt <- 0
simSize <- 5
simMin <- 100
simP <- 3/4
simQ <- 1
simPrint <- 10
# storage parameters
simStore <- array(NA, dim = c(simSize,3,3))
simI <- rep(NA, simSize)
# testing -----------------------------------------------------------------
# epi <- rgsem(c(beta, gamma), N)
# epi <- filter_gsem(epi)
#
# likelihood_complete_gsem(rates, epi[,2], epi[,1], N)
# mle_complete_gsem(epi[,2], epi[,1], N)
# pbla_incomplete_gsem(rates, epi[,2], epi[,1], N)
#
# pbla_partial_gsem(rates, epi[,2], N)
#
# epi <- sort_gsem(epi)
#
# epi2 <- impute_gsem(epi, 1/2)
# pbla_incomplete_gsem(rates, epi2[,2], epi2[,1], N)
#
#
# nlm(pbla_incomplete_gsem, c(1,1), r=epi2[,2], i=epi2[,1], N=N)$estimate
# nlm(pbla_partial_gsem, c(1,1), r=epi2[,2], N=N)$estimate
# mle_complete_gsem(epi[,2], epi[,1], N)
# Simulation Study --------------------------------------------------------
while(simCt < simSize){
epi <- rgsem(rates, N)
epi <- filter_gsem(epi)
while(dim(epi)[1] < simMin){
epi <- rgsem(rates, N)
epi <- filter_gsem(epi)
}
simCt <- simCt + 1
simI[simCt] <- dim(epi)[1]
r <- epi[,2]
i <- epi[,1]
simStore[simCt,1:2,1] <- mle_complete_gsem(r, i, N)
simStore[simCt,3,1] <- simStore[simCt,1,1] / simStore[simCt,2,1]
epi <- sort_gsem(epi)
r <- epi[,2]
simStore[simCt,1:2,2] <- nlm(pbla_partial_gsem, rates, r, N)$estimate
simStore[simCt,3,2] <- simStore[simCt,1,2] / simStore[simCt,2,2]
iepi <- decomplete_gsem(epi, simP, simQ)
iepi <- sort_gsem(iepi)
r <- iepi[,2]
i <- iepi[,1]
simStore[simCt,1:2,3] <- nlm(pbla_incomplete_gsem, rates, r, i, N)$estimate
simStore[simCt,3,3] <- simStore[simCt,1,3] / simStore[simCt,2,3]
if(!(simCt %% simPrint)){print(simCt)}
}
saveRDS(simStore, '../data/vanilla-4-1-200.rds')
readRDS('../data/vanilla-4-1-200.rds')
# incompleteSEM Simulation Study
# Seth Temple, sdtemple@uw.edu
# Setup -------------------------------------------------------------------
library(incompleteSEM)
# epidemic model parameters
N <- 200
beta <- 4
gamma <- 1
rates <- c(beta, gamma)
# simulation parameters
simCt <- 0
simSize <- 100
simMin <- 10
simP <- 3/4
simQ <- 1
simPrint <- 10
# storage parameters
simStore <- array(NA, dim = c(simSize,3,3))
simI <- rep(NA, simSize)
# testing -----------------------------------------------------------------
# epi <- rgsem(c(beta, gamma), N)
# epi <- filter_gsem(epi)
#
# likelihood_complete_gsem(rates, epi[,2], epi[,1], N)
# mle_complete_gsem(epi[,2], epi[,1], N)
# pbla_incomplete_gsem(rates, epi[,2], epi[,1], N)
#
# pbla_partial_gsem(rates, epi[,2], N)
#
# epi <- sort_gsem(epi)
#
# epi2 <- impute_gsem(epi, 1/2)
# pbla_incomplete_gsem(rates, epi2[,2], epi2[,1], N)
#
#
# nlm(pbla_incomplete_gsem, c(1,1), r=epi2[,2], i=epi2[,1], N=N)$estimate
# nlm(pbla_partial_gsem, c(1,1), r=epi2[,2], N=N)$estimate
# mle_complete_gsem(epi[,2], epi[,1], N)
# Simulation Study --------------------------------------------------------
while(simCt < simSize){
epi <- rgsem(rates, N)
epi <- filter_gsem(epi)
while(dim(epi)[1] < simMin){
epi <- rgsem(rates, N)
epi <- filter_gsem(epi)
}
simCt <- simCt + 1
simI[simCt] <- dim(epi)[1]
r <- epi[,2]
i <- epi[,1]
simStore[simCt,1:2,1] <- mle_complete_gsem(r, i, N)
simStore[simCt,3,1] <- simStore[simCt,1,1] / simStore[simCt,2,1]
epi <- sort_gsem(epi)
r <- epi[,2]
simStore[simCt,1:2,2] <- nlm(pbla_partial_gsem, rates, r, N)$estimate
simStore[simCt,3,2] <- simStore[simCt,1,2] / simStore[simCt,2,2]
iepi <- decomplete_gsem(epi, simP, simQ)
iepi <- sort_gsem(iepi)
r <- iepi[,2]
i <- iepi[,1]
simStore[simCt,1:2,3] <- nlm(pbla_incomplete_gsem, rates, r, i, N)$estimate
simStore[simCt,3,3] <- simStore[simCt,1,3] / simStore[simCt,2,3]
if(!(simCt %% simPrint)){print(simCt)}
}
saveRDS(simStore, '../data/vanilla-4-1-200.rds')
simStore
simI
plot(density(simStore[,3,1]))
lines(density(simStore[,3,2]))
lines(density(simStore[,3,3]))
plot(density(simStore[,3,1]), xlim = c(0,8), ylim = c(0,3))
plot(density(simStore[,3,1]), xlim = c(0,8), ylim = c(0,2))
lines(density(simStore[,3,2]), col = 'red')
lines(density(simStore[,3,3]), col = 'blue')
plot(density(simStore[,2,1]), xlim = c(0,2), ylim = c(0,2))
plot(density(simStore[,2,1]), xlim = c(0,2), ylim = c(0,4))
plot(density(simStore[,2,1]), xlim = c(0,2), ylim = c(0,10))
lines(density(simStore[,2,2]), col = 'red')
lines(density(simStore[,2,3]), col = 'blue')
plot(density(simStore[,1,1]), xlim = c(0,2), ylim = c(0,10))
plot(density(simStore[,1,1]), xlim = c(0,8), ylim = c(0,10))
plot(density(simStore[,1,1]), xlim = c(0,8), ylim = c(0,3))
lines(density(simStore[,1,3]), col = 'blue')
lines(density(simStore[,1,2]), col = 'red')
250 * 1/4
# saving
fn <- paste('../data/ii-' + beta + '-' + gamma + '-' + N + '-mat.rds')
saveRDS(simStore, fn)
# saving
fn <- paste('../data/ii-' + as.character(beta) + '-' + as.character(gamma) + '-' + as.character(N) + '-mat.rds')
# saving
fn <- paste('../data/ii-', beta, '-', gamma, '-', N, '-vec.rds', sep = '')
epi <- rgsem(c(beta, gamma), N)
epi <- filter_gsem(epi)
epi <- sort_gsem(epi)
epi2 <- decomplete_gsem(epi, 1/2)
View(epi2)
#' MLE for Removal Rate
#'
#' Compute the maximum likelihood estimate for the removal rate.
#'
#' @param r numeric vector: removal times
#' @param i numeric vector: infection times
#'
#' @return named vector (estimate, sample size)
#'
#' @export
mle_gamma <- function(r, i){
ind <- (!is.na(r)) * (!is.na(i))
ind <- which(ind == 1, arr.ind=T)
r <- r[ind]
i <- i[ind]
ri <- r - i
return(c(mle = length(ri) / sum(ri), n = length(ri)))
}
mle_gamma(epi2[,2], epi2[,1])
complete_incomplete_gsem <- function(epi, gamma){
for(j in 1:dim(epi)[1]){
if(is.na(epi[j,1])){epi[j,1] <- epi[j,2] - rexp(1, gamma)}
if(is.na(epi[j,2])){epi[j,2] <- epi[j,1] + rexp(1, gamma)}
}
return(epi)
}
g <- mle_gamma(epi2[,2], epi2[,1])[1]
epi3 <- complete_incomplete_gsem(epi2, g)
View(epi3)
View(epi)
mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
nlm(pbla_incomplete_gsem, c(1,1), r=epi2[,2], i=epi2[,1], N=N)$estimate
epi3[,1] == epi[,3]
epi3[,1] == epi[,1]
View(epi3)
epi3[,1] - epi[,1]
epi3[,2] - epi[,2]
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
#mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
#mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
#mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
#mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
#mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi[,2], epi[,1], 200)
mle_complete_gsem(epi[,2], epi[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
epi3 <- complete_incomplete_gsem(epi2, g)
mle_complete_gsem(epi3[,2], epi3[,1], 200)
out <- readRDS('../data/ii-1.2-1-200-mat.rds')
out
plot(density(out[,3,1]))
plot(density(out[,3,2]))
plot(density(out[,3,3]))
plot(density(out[,2,3]))
plot(density(out[,2,2]))
plot(density(out[,2,1]))
plot(density(out[,2,4]))
plot(density(out[,2,5]))
plot(density(out[,3,5]))
plot(density(out[,3,4]))
plot(density(out[,3,3]))
plot(density(out[,3,2]))
plot(density(out[,3,1]))
plot(density(out[,1,1]))
plot(density(out[,1,2]))
plot(density(out[,1,3]))
plot(density(out[,1,4]))
plot(density(out[,1,5]))
plot(density(out[,1,5])); abline(v=1.2)
plot(density(out[,1,4])); abline(v=1.2)
plot(density(out[,1,3])); abline(v=1.2)
plot(density(out[,1,2])); abline(v=1.2)
plot(density(out[,1,1])); abline(v=1.2)
plot(density(out[,2,1])); abline(v=1)
plot(density(out[,2,2])); abline(v=1)
plot(density(out[,2,3])); abline(v=1)
plot(density(out[,2,4])); abline(v=1)
plot(density(out[,2,5])); abline(v=1)
plot(density(out[,3,5])); abline(v=1.2)
plot(density(out[,3,4])); abline(v=1.2)
plot(density(out[,3,3])); abline(v=1.2)
plot(density(out[,3,2])); abline(v=1.2)
plot(density(out[,3,1])); abline(v=1.2)
plot(density(out[,3,1]), ylim = c(0,5)); abline(v=1.2)
plot(density(out[,3,2]), ylim = c(0,5)); abline(v=1.2)
plot(density(out[,3,3]), ylim = c(0,5)); abline(v=1.2)
plot(density(out[,3,4]), ylim = c(0,5)); abline(v=1.2)
plot(density(out[,3,5]), ylim = c(0,5)); abline(v=1.2)
j <- 3; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1.2); lines(density(out[,j,5]), lty = 2); lines(density(out[,j,4]), lty = 3); lines(density(out[,j,3]), lty = 4); lines(density(out[,j,2]), lty = 5)
j <- 2; plot(density(out[,j,1]), ylim = c(0,3)); abline(v=1.2); lines(density(out[,j,5]), lty = 2); lines(density(out[,j,4]), lty = 3); lines(density(out[,j,3]), lty = 4); lines(density(out[,j,2]), lty = 5)
j <- 2; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1); lines(density(out[,j,5]), lty = 2); lines(density(out[,j,4]), lty = 3); lines(density(out[,j,3]), lty = 4); lines(density(out[,j,2]), lty = 5)
j <- 1; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1.2); lines(density(out[,j,5]), lty = 2); lines(density(out[,j,4]), lty = 3); lines(density(out[,j,3]), lty = 4); lines(density(out[,j,2]), lty = 5)
out <- readRDS('../data/ii-1.5-1-200-mat.rds')
j <- 1; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1.2); lines(density(out[,j,5]), lty = 2); lines(density(out[,j,4]), lty = 3); lines(density(out[,j,3]), lty = 4); lines(density(out[,j,2]), lty = 5)
j <- 1; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1.5); lines(density(out[,j,5]), lty = 2); lines(density(out[,j,4]), lty = 3); lines(density(out[,j,3]), lty = 4); lines(density(out[,j,2]), lty = 5)
j <- 3; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1.5); lines(density(out[,j,5]), lty = 2); lines(density(out[,j,4]), lty = 3); lines(density(out[,j,3]), lty = 4); lines(density(out[,j,2]), lty = 5)
j <- 2; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1); lines(density(out[,j,5]), lty = 2); lines(density(out[,j,4]), lty = 3); lines(density(out[,j,3]), lty = 4); lines(density(out[,j,2]), lty = 5)
j <- 2; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1); lines(density(out[,j,5]), col = 'blue'); lines(density(out[,j,4]), col = 'green'); lines(density(out[,j,3]), col = 'red'); lines(density(out[,j,2]), col = 'orange')
j <- 3; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1.5); lines(density(out[,j,5]), col = 'blue'); lines(density(out[,j,4]), col = 'green'); lines(density(out[,j,3]), col = 'red'); lines(density(out[,j,2]), col = 'orange')
j <- 1; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1.5); lines(density(out[,j,5]), col = 'blue'); lines(density(out[,j,4]), col = 'green'); lines(density(out[,j,3]), col = 'red'); lines(density(out[,j,2]), col = 'orange')
j <- 1; plot(density(out[,j,1]), ylim = c(0,3)); abline(v=1.5); lines(density(out[,j,5]), col = 'blue'); lines(density(out[,j,4]), col = 'green'); lines(density(out[,j,3]), col = 'red'); lines(density(out[,j,2]), col = 'orange')
j <- 2; plot(density(out[,j,1]), ylim = c(0,3)); abline(v=1); lines(density(out[,j,5]), col = 'blue'); lines(density(out[,j,4]), col = 'green'); lines(density(out[,j,3]), col = 'red'); lines(density(out[,j,2]), col = 'orange')
j <- 3; plot(density(out[,j,1]), ylim = c(0,3)); abline(v=1.5); lines(density(out[,j,5]), col = 'blue'); lines(density(out[,j,4]), col = 'green'); lines(density(out[,j,3]), col = 'red'); lines(density(out[,j,2]), col = 'orange')
out <- readRDS('../data/ii-1.8-1-200-mat.rds')
j <- 3; plot(density(out[,j,1]), ylim = c(0,3)); abline(v=1.5); lines(density(out[,j,5]), col = 'blue'); lines(density(out[,j,4]), col = 'green'); lines(density(out[,j,3]), col = 'red'); lines(density(out[,j,2]), col = 'orange')
j <- 3; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1.8); lines(density(out[,j,5]), col = 'blue'); lines(density(out[,j,4]), col = 'green'); lines(density(out[,j,3]), col = 'red'); lines(density(out[,j,2]), col = 'orange')
j <- 2; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1); lines(density(out[,j,5]), col = 'blue'); lines(density(out[,j,4]), col = 'green'); lines(density(out[,j,3]), col = 'red'); lines(density(out[,j,2]), col = 'orange')
j <- 1; plot(density(out[,j,1]), ylim = c(0,5)); abline(v=1.8); lines(density(out[,j,5]), col = 'blue'); lines(density(out[,j,4]), col = 'green'); lines(density(out[,j,3]), col = 'red'); lines(density(out[,j,2]), col = 'orange')
# # likelihood_complete_gsem(rates, epi[,2], epi[,1], N)
# # mle_complete_gsem(epi[,2], epi[,1], N)
# # pbla_incomplete_gsem(rates, epi[,2], epi[,1], N)
#
# # pbla_partial_gsem(rates, epi[,2], N)
#
# epi <- sort_gsem(epi)
#
# epi2 <- decomplete_gsem(epi, 1/2)
#
g <- mle_gamma(epi2[,2], epi2[,1])[1]
epi3 <- complete_incomplete_gsem(epi2, g)
g
pbla_test <- function(beta, gamma, r, i, N){
return(pbla_incomplete_gsem(c(beta, gamma), r, i, N))
}
nlm(pbla_test, 1, g, epi2[,2], epi2[,1], N)
nlm(pbla_incomplete_gsem, c(1,1), r=epi2[,2], i=epi2[,1], N=N)
mle_complete_gsem(epi[,2], epi[,1], N)
# epi <- filter_gsem(epi)
#
# # likelihood_complete_gsem(rates, epi[,2], epi[,1], N)
# # mle_complete_gsem(epi[,2], epi[,1], N)
# # pbla_incomplete_gsem(rates, epi[,2], epi[,1], N)
#
# # pbla_partial_gsem(rates, epi[,2], N)
#
# epi <- sort_gsem(epi)
#
epi2 <- decomplete_gsem(epi, 3/4)
g <- mle_gamma(epi2[,2], epi2[,1])[1]
g
nlm(pbla_test, 1, g, epi2[,2], epi2[,1], N)
nlm(pbla_incomplete_gsem, c(1,1), r=epi2[,2], i=epi2[,1], N=N)
mle_complete_gsem(epi[,2], epi[,1], N)
